/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.slayer.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.slayer.model.LMSBorrowing;
import com.slayer.model.LMSBorrowingModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LMSBorrowing service. Represents a row in the &quot;library_LMSBorrowing&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.slayer.model.LMSBorrowingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LMSBorrowingImpl}.
 * </p>
 *
 * @author rafael
 * @see LMSBorrowingImpl
 * @see com.slayer.model.LMSBorrowing
 * @see com.slayer.model.LMSBorrowingModel
 * @generated
 */
public class LMSBorrowingModelImpl extends BaseModelImpl<LMSBorrowing>
	implements LMSBorrowingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a l m s borrowing model instance should use the {@link com.slayer.model.LMSBorrowing} interface instead.
	 */
	public static final String TABLE_NAME = "library_LMSBorrowing";
	public static final Object[][] TABLE_COLUMNS = {
			{ "borrowingId", Types.BIGINT },
			{ "bookId", Types.BIGINT },
			{ "memberId", Types.BIGINT },
			{ "dateBorrowed", Types.TIMESTAMP },
			{ "dateReturned", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table library_LMSBorrowing (borrowingId LONG not null primary key,bookId LONG,memberId LONG,dateBorrowed DATE null,dateReturned DATE null)";
	public static final String TABLE_SQL_DROP = "drop table library_LMSBorrowing";
	public static final String ORDER_BY_JPQL = " ORDER BY lmsBorrowing.borrowingId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY library_LMSBorrowing.borrowingId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.slayer.model.LMSBorrowing"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.slayer.model.LMSBorrowing"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.slayer.model.LMSBorrowing"),
			true);
	public static long BOOKID_COLUMN_BITMASK = 1L;
	public static long BORROWINGID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.slayer.model.LMSBorrowing"));

	public LMSBorrowingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _borrowingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBorrowingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _borrowingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LMSBorrowing.class;
	}

	@Override
	public String getModelClassName() {
		return LMSBorrowing.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("borrowingId", getBorrowingId());
		attributes.put("bookId", getBookId());
		attributes.put("memberId", getMemberId());
		attributes.put("dateBorrowed", getDateBorrowed());
		attributes.put("dateReturned", getDateReturned());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long borrowingId = (Long)attributes.get("borrowingId");

		if (borrowingId != null) {
			setBorrowingId(borrowingId);
		}

		Long bookId = (Long)attributes.get("bookId");

		if (bookId != null) {
			setBookId(bookId);
		}

		Long memberId = (Long)attributes.get("memberId");

		if (memberId != null) {
			setMemberId(memberId);
		}

		Date dateBorrowed = (Date)attributes.get("dateBorrowed");

		if (dateBorrowed != null) {
			setDateBorrowed(dateBorrowed);
		}

		Date dateReturned = (Date)attributes.get("dateReturned");

		if (dateReturned != null) {
			setDateReturned(dateReturned);
		}
	}

	@Override
	public long getBorrowingId() {
		return _borrowingId;
	}

	@Override
	public void setBorrowingId(long borrowingId) {
		_borrowingId = borrowingId;
	}

	@Override
	public long getBookId() {
		return _bookId;
	}

	@Override
	public void setBookId(long bookId) {
		_columnBitmask |= BOOKID_COLUMN_BITMASK;

		if (!_setOriginalBookId) {
			_setOriginalBookId = true;

			_originalBookId = _bookId;
		}

		_bookId = bookId;
	}

	public long getOriginalBookId() {
		return _originalBookId;
	}

	@Override
	public long getMemberId() {
		return _memberId;
	}

	@Override
	public void setMemberId(long memberId) {
		_memberId = memberId;
	}

	@Override
	public Date getDateBorrowed() {
		return _dateBorrowed;
	}

	@Override
	public void setDateBorrowed(Date dateBorrowed) {
		_dateBorrowed = dateBorrowed;
	}

	@Override
	public Date getDateReturned() {
		return _dateReturned;
	}

	@Override
	public void setDateReturned(Date dateReturned) {
		_dateReturned = dateReturned;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LMSBorrowing.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LMSBorrowing toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LMSBorrowing)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LMSBorrowingImpl lmsBorrowingImpl = new LMSBorrowingImpl();

		lmsBorrowingImpl.setBorrowingId(getBorrowingId());
		lmsBorrowingImpl.setBookId(getBookId());
		lmsBorrowingImpl.setMemberId(getMemberId());
		lmsBorrowingImpl.setDateBorrowed(getDateBorrowed());
		lmsBorrowingImpl.setDateReturned(getDateReturned());

		lmsBorrowingImpl.resetOriginalValues();

		return lmsBorrowingImpl;
	}

	@Override
	public int compareTo(LMSBorrowing lmsBorrowing) {
		long primaryKey = lmsBorrowing.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LMSBorrowing)) {
			return false;
		}

		LMSBorrowing lmsBorrowing = (LMSBorrowing)obj;

		long primaryKey = lmsBorrowing.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LMSBorrowingModelImpl lmsBorrowingModelImpl = this;

		lmsBorrowingModelImpl._originalBookId = lmsBorrowingModelImpl._bookId;

		lmsBorrowingModelImpl._setOriginalBookId = false;

		lmsBorrowingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LMSBorrowing> toCacheModel() {
		LMSBorrowingCacheModel lmsBorrowingCacheModel = new LMSBorrowingCacheModel();

		lmsBorrowingCacheModel.borrowingId = getBorrowingId();

		lmsBorrowingCacheModel.bookId = getBookId();

		lmsBorrowingCacheModel.memberId = getMemberId();

		Date dateBorrowed = getDateBorrowed();

		if (dateBorrowed != null) {
			lmsBorrowingCacheModel.dateBorrowed = dateBorrowed.getTime();
		}
		else {
			lmsBorrowingCacheModel.dateBorrowed = Long.MIN_VALUE;
		}

		Date dateReturned = getDateReturned();

		if (dateReturned != null) {
			lmsBorrowingCacheModel.dateReturned = dateReturned.getTime();
		}
		else {
			lmsBorrowingCacheModel.dateReturned = Long.MIN_VALUE;
		}

		return lmsBorrowingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{borrowingId=");
		sb.append(getBorrowingId());
		sb.append(", bookId=");
		sb.append(getBookId());
		sb.append(", memberId=");
		sb.append(getMemberId());
		sb.append(", dateBorrowed=");
		sb.append(getDateBorrowed());
		sb.append(", dateReturned=");
		sb.append(getDateReturned());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.slayer.model.LMSBorrowing");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>borrowingId</column-name><column-value><![CDATA[");
		sb.append(getBorrowingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bookId</column-name><column-value><![CDATA[");
		sb.append(getBookId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>memberId</column-name><column-value><![CDATA[");
		sb.append(getMemberId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateBorrowed</column-name><column-value><![CDATA[");
		sb.append(getDateBorrowed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateReturned</column-name><column-value><![CDATA[");
		sb.append(getDateReturned());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LMSBorrowing.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LMSBorrowing.class
		};
	private long _borrowingId;
	private long _bookId;
	private long _originalBookId;
	private boolean _setOriginalBookId;
	private long _memberId;
	private Date _dateBorrowed;
	private Date _dateReturned;
	private long _columnBitmask;
	private LMSBorrowing _escapedModel;
}